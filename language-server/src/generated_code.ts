import { assert } from 'console';
import * as scriptfiles from './as_parser';
import * as typedb from './database';

let UseHazeGeneratedCode = true;

export function ProcessScriptTypeGeneratedCode(dbtype : typedb.DBType, asmodule : scriptfiles.ASModule)
{
    // Code that all delegate structs have
    if (dbtype.isEvent || dbtype.isDelegate)
        AddGeneratedCodeForDelegate(dbtype, asmodule);

    if (!dbtype.isStruct && !dbtype.isNamespace())
    {
        let nsType = new typedb.DBType();
        nsType.declaredModule = dbtype.declaredModule;
        nsType.moduleOffset = dbtype.moduleOffset;
        nsType.initEmpty("__"+dbtype.typename);

        // Code that all UObject classes have
        AddGeneratedCodeForUObject(dbtype, nsType);

        // Code that only actor components have
        if (dbtype.inheritsFrom("UActorComponent"))
            AddGeneratedCodeForUActorComponent(dbtype, nsType);

        // Code that only actors have
        if (dbtype.inheritsFrom("AActor"))
            AddGeneratedCodeForAActor(dbtype, nsType);

        if (UseHazeGeneratedCode)
            AddHazeGeneratedCode(dbtype, nsType);

        // Merge namespace into the type database
        nsType = typedb.MergeNamespaceToDB(nsType, false);
        asmodule.namespaces.push(nsType);
    }
}

function AddMethod(dbtype : typedb.DBType, name : string) : typedb.DBMethod
{
    let method = new typedb.DBMethod();
    method.name = name;
    method.declaredModule = dbtype.declaredModule;
    method.moduleOffset = dbtype.moduleOffset;
    method.isAutoGenerated = true;
    dbtype.methods.push(method);
    dbtype.addSymbol(method);
    return method;
}

function AddProperty(dbtype : typedb.DBType, name : string) : typedb.DBProperty
{
    let prop = new typedb.DBProperty();
    prop.name = name;
    prop.declaredModule = dbtype.declaredModule;
    prop.moduleOffset = dbtype.moduleOffset;
    prop.isAutoGenerated = true;
    dbtype.properties.push(prop);
    dbtype.addSymbol(prop);
    return prop;
}

function AddGeneratedCodeForUObject(dbtype : typedb.DBType, nsType : typedb.DBType)
{
    {
        let method = AddMethod(nsType, "StaticClass");
        method.returnType = "UClass";
        method.documentation = "Gets the descriptor for the class generated for the specified type.";
        method.args = [];
    }
}

function AddGeneratedCodeForUActorComponent(dbtype : typedb.DBType, nsType : typedb.DBType)
{
    {
        let method = AddMethod(nsType, "Get");
        method.returnType = dbtype.typename;
        method.documentation = "Get the component of this type from an actor. Specified name is optional.";
        method.args = [
            new typedb.DBArg().init("AActor", "Actor"),
            new typedb.DBArg().init("FName", "WithName", "NAME_None"),
        ];
    }

    {
        let method = AddMethod(nsType, "GetOrCreate");
        method.returnType = dbtype.typename;
        method.documentation = "Get a component of a particular type on an actor, create it if it doesn't exist. Specified name is optional.";
        method.args = [
            new typedb.DBArg().init("AActor", "Actor"),
            new typedb.DBArg().init("FName", "WithName", "NAME_None"),
        ];
    }

    {
        let method = AddMethod(nsType, "Create");
        method.returnType = dbtype.typename;
        method.documentation = "Always create a new component of this type on an actor.";
        method.args = [
            new typedb.DBArg().init("AActor", "Actor"),
            new typedb.DBArg().init("FName", "WithName", "NAME_None"),
        ];
    }
}

function AddGeneratedCodeForAActor(dbtype : typedb.DBType, nsType : typedb.DBType)
{
    {
        let method = AddMethod(nsType, "Spawn");
        method.returnType = dbtype.typename;
        method.documentation = "Spawn a new actor of this type into the world.";
        method.args = [
            new typedb.DBArg().init("FVector", "Location", "FVector::ZeroVector"),
            new typedb.DBArg().init("FRotator", "Rotation", "FRotator::ZeroRotator"),
            new typedb.DBArg().init("FName", "Name", "NAME_None"),
            new typedb.DBArg().init("bool", "bDeferredSpawn", "false"),
            new typedb.DBArg().init("ULevel", "Level", "nullptr"),
        ];
        dbtype.methods.push(method);
    }
}

function AddGeneratedCodeForDelegate(dbtype : typedb.DBType, asmodule : scriptfiles.ASModule)
{
    {
        let method = AddMethod(dbtype, "IsBound");
        method.returnType = "bool";
        method.documentation = "Whether the anything is bound to the delegate.";
        method.args = [];
    }

    {
        let method = AddMethod(dbtype, "Clear");
        method.returnType = "void";
        method.documentation = "Remove all bindings from the delegate.";
        method.args = [];
    }

    if (dbtype.isEvent)
    {
        {
            let method = AddMethod(dbtype, "Broadcast");
            method.returnType = dbtype.delegateReturn;
            method.documentation = "Broadcast event to all existing bindings.";
            method.args = new Array<typedb.DBArg>();
            for (let delegateArg of dbtype.delegateArgs)
            {
                let arg = new typedb.DBArg();
                arg.name = delegateArg.name;
                arg.typename = delegateArg.typename;
                method.args.push(arg);
            }
        }

        {
            let method = AddMethod(dbtype, "AddUFunction");
            method.returnType = "void";
            method.documentation = "Add a new binding to this event. Make sure the function you're binding is a UFUNCTION().";
            method.isDelegateBindFunction = true;
            method.delegateBindType = dbtype.typename;
            method.delegateObjectParam = 0;
            method.delegateFunctionParam = 1;
            method.args = [
                new typedb.DBArg().init("UObject", "Object"),
                new typedb.DBArg().init("FName", "FunctionName"),
            ];
        }

        {
            let method = AddMethod(dbtype, "Unbind");
            method.returnType = "void";
            method.documentation = "Unbind a specific function that was previously added to this event.";
            method.isDelegateBindFunction = true;
            method.delegateBindType = dbtype.typename;
            method.delegateObjectParam = 0;
            method.delegateFunctionParam = 1;
            method.args = [
                new typedb.DBArg().init("UObject", "Object"),
                new typedb.DBArg().init("FName", "FunctionName"),
            ];
        }

        {
            let method = AddMethod(dbtype, "UnbindObject");
            method.returnType = "void";
            method.documentation = "Unbind all previously added functions that are called on the specified object.";
            method.args = [
                new typedb.DBArg().init("UObject", "Object"),
            ];
        }
    }
    else
    {
        {
            let method = AddMethod(dbtype, "Execute");
            method.returnType = dbtype.delegateReturn;
            method.documentation = "Execute the function bound to the delegate. Will throw an error if nothing is bound, use ExecuteIfBound() if you do not want an error in that case.";
            method.args = new Array<typedb.DBArg>();
            for (let delegateArg of dbtype.delegateArgs)
            {
                let arg = new typedb.DBArg();
                arg.name = delegateArg.name;
                arg.typename = delegateArg.typename;
                method.args.push(arg);
            }
        }

        {
            let method = AddMethod(dbtype, "ExecuteIfBound");
            method.returnType = dbtype.delegateReturn;
            method.documentation = "Execute the function if one is bound to the delegate, otherwise do nothing.";
            method.args = new Array<typedb.DBArg>();
            for (let delegateArg of dbtype.delegateArgs)
            {
                let arg = new typedb.DBArg();
                arg.name = delegateArg.name;
                arg.typename = delegateArg.typename;
                method.args.push(arg);
            }
        }

        {
            let method = AddMethod(dbtype, "BindUFunction");
            method.returnType = "void";
            method.documentation = "Set the function that is bound to this delegate. Make sure the function you're binding is a UFUNCTION().";
            method.delegateBindType = dbtype.typename;
            method.delegateObjectParam = 0;
            method.delegateFunctionParam = 1;
            method.isDelegateBindFunction = true;
            method.args = [
                new typedb.DBArg().init("UObject", "Object"),
                new typedb.DBArg().init("FName", "FunctionName"),
            ];
        }

        {
            let method = AddMethod(dbtype, "GetUObject");
            method.isProperty = true;
            method.name = "GetUObject";
            method.returnType = "UObject";
            method.documentation = "Get the object that this delegate is bound to. Returns nullptr if unbound.";
            method.args = [];
        }

        {
            let method = AddMethod(dbtype, "GetFunctionName");
            method.isProperty = true;
            method.returnType = "FName";
            method.documentation = "Get the function that this delegate is bound to. Returns NAME_None if unbound.";
            method.args = [];
        }

        {
            let method = AddMethod(asmodule.global_type, dbtype.typename);
            method.returnType = dbtype.typename;
            method.documentation = dbtype.documentation;
            method.isConstructor = true;
            method.args = [
                new typedb.DBArg().init("UObject", "Object", "nullptr"),
                new typedb.DBArg().init("FName", "FunctionName", "NAME_None"),
            ];

            asmodule.globals.push(method);
            typedb.AddScriptGlobalSymbol(method);
        }
    }

    return dbtype;
}

function AddHazeGeneratedCode(dbtype : typedb.DBType, nsType : typedb.DBType)
{
    if (dbtype.inheritsFrom("UHazeComposableSettings"))
        AddGeneratedCodeForUHazeComposableSettings(dbtype, nsType);
}

function AddGeneratedCodeForUHazeComposableSettings(dbtype : typedb.DBType, nsType : typedb.DBType)
{
    {
        let method = AddMethod(nsType, "GetSettings");
        method.returnType = dbtype.typename;
        method.documentation = "Get the result settings asset for a specific actor.";
        method.args = [
            new typedb.DBArg().init("AHazeActor", "Actor"),
        ];
    }

    {
        let method = AddMethod(nsType, "TakeTransientSettings");
        method.returnType = dbtype.typename;
        method.documentation = "Grab a transient settings asset that can be used to temporarily overried values. Must be returned with Actor.ReturnTransientSettings to apply new values.";
        method.args = [
            new typedb.DBArg().init("AHazeActor", "Actor"),
            new typedb.DBArg().init("FInstigator", "Instigator"),
            new typedb.DBArg().init("EHazeSettingsPriority", "Priority", "EHazeSettingsPriority::Script"),
        ];
    }

    for (let dbprop of dbtype.properties)
    {
        if (!dbprop.isUProperty)
            continue;

        {
            let overrideProp = AddProperty(dbtype, "bOverride_"+dbprop.name);
            overrideProp.moduleOffset = dbprop.moduleOffset;
            overrideProp.typename = "bool";
        }

        let setName = dbprop.name;
        if (setName[0] == 'b' && setName.length >= 2 && setName[1] == setName[1].toUpperCase())
            setName = setName.substr(1);

        {
            let method = AddMethod(nsType, "Set"+setName);
            method.returnType = "void";
            method.documentation = "Apply a transient override for this composable settings property.";
            method.moduleOffset = dbprop.moduleOffset;
            method.args = [
                new typedb.DBArg().init("AHazeActor", "Actor"),
                new typedb.DBArg().init(dbprop.typename, "NewValue"),
                new typedb.DBArg().init("FInstigator", "Instigator"),
                new typedb.DBArg().init("EHazeSettingsPriority", "Priority", "EHazeSettingsPriority::Script"),
            ];
        }

        {
            let method = AddMethod(nsType, "Clear"+setName);
            method.returnType = "void";
            method.documentation = "Clear a previously applied transient override.";
            method.moduleOffset = dbprop.moduleOffset;
            method.args = [
                new typedb.DBArg().init("AHazeActor", "Actor"),
                new typedb.DBArg().init("FInstigator", "Instigator"),
                new typedb.DBArg().init("EHazeSettingsPriority", "Priority", "EHazeSettingsPriority::Script"),
            ];
        }
    }
}